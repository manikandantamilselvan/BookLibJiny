//
//  BookListViewController.swift
//  jinybookassessment
//
//  Created by Manikandan Tamilselvan on 08/07/19.
//  Copyright (c) 2019 widas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookListDisplayLogic: class
{
    func showBookList(viewModel:[BookDetailsEntity])
    func showFailureData()
}

class BookListViewController: UIViewController, BookListDisplayLogic, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate
{
    
    // MARK: Outlets
    
    @IBOutlet weak var titleView: UIView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var bookListTable: UITableView!
    
    
    // MARK: var & let
    
    var interactor: BookListBusinessLogic?
    var router: (NSObjectProtocol & BookListRoutingLogic & BookListDataPassing)?
    
    fileprivate var bookDetails : [BookDetailsEntity] = []
    fileprivate var filteredBookDetails : [BookDetailsEntity] = []
    
    var type: String = ""
    var query: String = ""
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BookListInteractor()
        let presenter = BookListPresenter()
        let router = BookListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.setupDelegate()
        self.registerViewCells()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.fetchBookDetails()
    }
    
    // MARK: setup delegate
    
    private func setupDelegate()
    {
        self.bookListTable.delegate = self
        self.bookListTable.dataSource = self
        self.searchBar.delegate = self
    }
    
    // MARK: Register view cells
    
    private func registerViewCells()
    {
        let cellNib = UINib(nibName: "BookDetailViewCell", bundle: nil)
        self.bookListTable.register(cellNib, forCellReuseIdentifier: "BookDetailViewCell")
        self.bookListTable.reloadData()
    }
    
    // MARK: Fetch book details
    
    func fetchBookDetails()
    {
        self.interactor?.fetchBookDataBy(type: type, query: query)
    }
    
    // MARK: Show Book List
    
    func showBookList(viewModel: [BookDetailsEntity]) {
        self.bookDetails = viewModel
        self.filteredBookDetails = viewModel
        self.bookListTable.reloadData()
    }
    
    // MARK: Failure Data
    
    func showFailureData() {
        
    }
    
    // MARK: - Search Bar Delegate methods
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        if (searchBar.text?.count ?? 0) > 0 {
            searchBar.showsCancelButton = true
        }
    }
    
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        if (searchBar.text?.count ?? 0) > 0 {
            searchBar.showsCancelButton = true
        }
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = ""
        self.filteredBookDetails = self.bookDetails
        self.bookListTable.reloadData()
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.searchBookByTitle(searchTerm: searchBar.text!)
        self.view.endEditing(true)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if (searchBar.text?.count ?? 0) >= 3 {
            self.searchBookByTitle(searchTerm: searchBar.text!)
            self.view.endEditing(true)
        }
    }
    
    private func searchBookByTitle(searchTerm:String)
    {
        self.filteredBookDetails = self.bookDetails.filter({ (b) -> Bool in
            return b.book_title.contains(searchTerm)
        })
        self.bookListTable.reloadData()
    }
    
    // MARK: Table delegate methods
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.filteredBookDetails.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "BookDetailViewCell", for: indexPath) as! BookDetailViewCell
        let bookDetail = self.filteredBookDetails[indexPath.row]
        cell.titleLabel.text  = bookDetail.book_title
        cell.authorLabel.text = bookDetail.author_name
        cell.genreLabel.text  = bookDetail.genre
        cell.bookCoverImage.cacheImage(urlString: bookDetail.image_url)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.router?.routerToBookDetailPage(bookId: self.filteredBookDetails[indexPath.row].id)
    }
    
    // MARK: Back to VC
    
    @IBAction func backButtonClicked(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
}
