//
//  BookDetailsViewController.swift
//  jinybookassessment
//
//  Created by Manikandan Tamilselvan on 08/07/19.
//  Copyright (c) 2019 widas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookDetailsDisplayLogic: class
{
}

class BookDetailsViewController: UIViewController, BookDetailsDisplayLogic
{
    
    // MARK: Outlets
    
    @IBOutlet weak var mainView: UIView!
    @IBOutlet weak var titleLabe: UILabel!
    @IBOutlet weak var bookCoverImage: UIImageView!
    @IBOutlet weak var authorLabel: UILabel!
    @IBOutlet weak var genreLabel: UILabel!
    @IBOutlet weak var aboutLabel: UILabel!
    
    
    // MARK: var & let
    
    var interactor: BookDetailsBusinessLogic?
    var router: (NSObjectProtocol & BookDetailsRoutingLogic & BookDetailsDataPassing)?
    
    var bookId: String = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BookDetailsInteractor()
        let presenter = BookDetailsPresenter()
        let router = BookDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.UpdateUI()
    }
    
    private func UpdateUI()
    {
        BookDetailRepo().fetchBookDetailBy(bookId) { (bookDetail) in
            if let _bookDetail = bookDetail {
                DispatchQueue.main.async {
                    self.titleLabe.text = _bookDetail.book_title
                    self.authorLabel.text = _bookDetail.author_name
                    self.aboutLabel.text = _bookDetail.publisher
                    self.genreLabel.text = _bookDetail.genre
                    self.bookCoverImage.cacheImage(urlString: _bookDetail.image_url)
                }
            }
        }
    }
    
    @IBAction func backButtonClicked(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
    
}
