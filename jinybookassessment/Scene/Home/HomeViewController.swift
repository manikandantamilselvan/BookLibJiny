//
//  HomeViewController.swift
//  jinybookassessment
//
//  Created by Manikandan Tamilselvan on 08/07/19.
//  Copyright (c) 2019 widas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PopupDialog

protocol HomeDisplayLogic: class
{
    func showBooksData(viewModel:[BookDetailsEntity])
    func showFailureData()
}

class HomeViewController: UIViewController, HomeDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    
    // MARk: Outlets
    
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var bookListTable: UITableView!
    @IBOutlet weak var filterButton: UIButton!
    @IBOutlet weak var refreshButton: UIButton!
    @IBOutlet weak var bookLibButton: UIButton!
    
    
    // MARK: Var and Let
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    fileprivate var bookList : [BookDetailsEntity] = []
    fileprivate var filteredList : [String] = []
    fileprivate var selectedFilter: String = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.registerViewCells()
        self.hideUI(isData: false)
    }
    
    // MARK: Register view cells
    
    private func registerViewCells()
    {
        let cellNib = UINib(nibName: "titleViewCell", bundle: nil)
        self.bookListTable.register(cellNib, forCellReuseIdentifier: "titleViewCell")
        self.bookListTable.reloadData()
    }
    
    // MARK: Refresh Data
    
    @IBAction func refreshButtonClicked(_ sender: UIButton) {
        self.interactor?.fetchAllBook()
    }
    
    // MARK: Filter Data
    
    @IBAction func filterButtonClicked(_ sender: UIButton) {
        DispatchQueue.main.async {
            
            var filterDropDown: [DropDownEntity] = []
            
            filterDropDown = FilterType.allValues.map({ (fT) in
                let dropDownItem = DropDownEntity()
                dropDownItem.name = fT.rawValue.capitalized
                dropDownItem.stringID = fT.rawValue
                return dropDownItem
            })
            
            let dropDown = DropDownList(nibName: "DropDownList", bundle: nil)
            dropDown.selectedItemId = self.selectedFilter
            dropDown.delegateCtrl   = self
            dropDown.titleText      = "Filter Options"
            dropDown.ItemList       = filterDropDown
            
            let popup = PopupDialog(viewController: dropDown, buttonAlignment: .horizontal, transitionStyle: .bounceDown, tapGestureDismissal: true)
            dropDown.navController = self.navigationController
            self.present(popup, animated: true, completion: nil)
            
            dropDown.selectedObject = { obj in
                self.selectedFilter = obj.stringID ?? ""
                self.filterBy(self.selectedFilter)
                popup.dismiss(nil)
            }
        }
    }
    
    // MARK: Filter Data
    
    private func filterBy(_ key:String)
    {
        switch key {
        case FilterType.country.rawValue:
            self.filteredList = Array(Set(self.bookList.map({ $0.author_country })))
            break
        case FilterType.author.rawValue:
            self.filteredList = Array(Set(self.bookList.map({ $0.author_name })))
            break
        case FilterType.genre.rawValue:
            self.filteredList = Array(Set(self.bookList.map({ $0.genre })))
            break
        default:
            self.filteredList = Array(Set(self.bookList.map({ $0.author_name })))
            break
        }
        self.filteredList = self.filteredList.sorted(by: <)
        self.bookListTable.reloadData()
    }
    
    // MARK: Get Book
    
    @IBAction func bookLibButtonClicked(_ sender: UIButton) {
        self.interactor?.fetchAllBook()
        
    }
    
    // MARK: Show Book Data
    
    func showBooksData(viewModel: [BookDetailsEntity]) {
        self.bookList = viewModel
        self.filterBy(self.selectedFilter)
        self.hideUI(isData: true)
    }
    
    func showFailureData() {
        self.hideUI(isData: false)
    }
    
    // MARK: Hide UI Elements
    
    private func hideUI(isData:Bool)
    {
        self.bookListTable.isHidden = isData ? false : true
        self.bookLibButton.isHidden = isData ? true  : false
        self.filterButton.isHidden  = isData ? false : true
        self.refreshButton.isHidden = isData ? false : true
    }
    
    // MARK: Table delegate methods
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.filteredList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "titleViewCell", for: indexPath) as! titleViewCell
        cell.titleLabel.text = filteredList[indexPath.row]
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.router?.routerToBookListPage(type: self.selectedFilter, query: filteredList[indexPath.row])
    }
}
